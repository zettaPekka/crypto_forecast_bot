from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ContentType, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext

from forecast_bot.middlewares.db_di import DatabaseDI
from database.services.user_service import UserService
from database.services.trader_data_service import TraderDataService
from database.services.stat_service import StatService
from forecast_bot.states.user_states import UserDataState
from forecast_bot.keyboards import user_kbs
from parse.news_parser import get_current_news

from random import randint
from datetime import datetime, timezone, timedelta


router = Router()
router.message.middleware(DatabaseDI())
router.callback_query.middleware(DatabaseDI())


@router.message(CommandStart())
async def start_handler(message: Message, user_service: UserService, trader_data_service: TraderDataService):
    tg_id = message.from_user.id
    
    await user_service.create_if_not_exists(tg_id)
    trader_data = await trader_data_service.get_by_tg_id(tg_id)
    
    if not trader_data:
        image = FSInputFile('images/photo.jpg')
        text = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ JIKO TRADE!</b>\n\n<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b>\n\n<b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n<blockquote>‚úÖ –°–∏–≥–Ω–∞–ª—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫—Ç–∏–≤ —Å –ª—é–±—ã–º –ø–µ—Ä–∏–æ–¥–æ–º\n‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ OTC\n‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n‚úÖ –ß–µ—Å—Ç–Ω—É—é –∏ –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n‚úÖ –ù–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –±–æ–Ω—É—Å—ã</blockquote></b>\n\n<b>–°–∫–æ—Ä–µ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è üëá</b>"
        await message.answer_photo(image, caption=text,
                                reply_markup=user_kbs.start_left_kb)
        return

    if trader_data.balance > 0:
        image = FSInputFile('images/photo.jpg')
        await message.answer_photo(image, caption='<b>–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n<blockquote>/news ‚Äì üì∞ –ù–æ–≤–æ—Å—Ç–∏ \n/forecast ‚Äì üìä –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑</blockquote></b>',
                                    reply_markup=user_kbs.main_kb)
        return
    
    image = FSInputFile('images/photo.jpg')
    await message.answer_photo(image, caption='–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç',
                            reply_markup=user_kbs.check_dep_kb)


@router.callback_query(F.data == 'get_access')
async def get_access(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    image = FSInputFile('images/photo.jpg')
    text = "<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç—É–ø) –∏–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ.\n\n–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Ç—Ä–µ–π–¥–µ—Ä-ID –Ω–∏–∂–µ\n\n<blockquote>–ü—Ä–æ–º–æ ‚Äì <code>KRX068</code> (+60% –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é)</blockquote></b>"
    image = InputMediaPhoto(media=image, caption=text)
    await callback.message.edit_media(image)
    await state.set_state(UserDataState.trader_id)


@router.message(UserDataState.trader_id)
async def check_trader_id(message: Message, trader_data_service: TraderDataService, state: FSMContext):
    trader_id = int(message.text) if message.text.isdigit() else -1
    res = await trader_data_service.check_trader_id(trader_id, message.from_user.id)
    
    if res:
        await message.answer(f'<b>‚úî –û—Ç–ª–∏—á–Ω–æ ID {trader_id} –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º\n\n–ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ <code>KRX068</code> –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç +60% –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>',
                                reply_markup=user_kbs.check_dep_kb)
        await state.clear()
        return
    
    await message.answer('<b>‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≤–µ—Ä–¥–∏—Ç—å ID, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã —É–∂–µ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤—ã–π ID</b>',
                            reply_markup=user_kbs.reg_kb)


@router.callback_query(F.data == 'check_dep')
async def check_dep(callback: CallbackQuery, trader_data_service: TraderDataService):
    await callback.answer()
    
    trader_data = await trader_data_service.get_by_tg_id(callback.from_user.id)
    
    if trader_data.balance > 0:
        image = FSInputFile('images/photo.jpg')
        await callback.message.answer_photo(image, caption='<b>–£—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É –±–æ—Ç—É, –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã 24/7 ‚ú®\n\n<blockquote>/news ‚Äì üì∞ –ù–æ–≤–æ—Å—Ç–∏ \n/forecast ‚Äì üìä –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑</blockquote></b>',
                                            reply_markup=user_kbs.main_kb)
        return
    
    await callback.message.answer('<b>–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ –∫–Ω–æ–ø–∫–µ üëá</b>',
                                    reply_markup=user_kbs.check_dep_kb)


@router.callback_query(F.data == 'promo')
async def promo(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('–ü—Ä–æ–º–æ–∫–æ–¥—ã: ...')


@router.callback_query(F.data == 'learning')
async def promo(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('–û–±—É—á–µ–Ω–∏–µ')


@router.callback_query(F.data == 'news')
async def promo(callback: CallbackQuery):
    await callback.answer()
    news = await get_current_news()

    message_text = ''
    for n in news:
        message_text += f'<b>‚è≥ –í—Ä–µ–º—è: <i>{n["time"]}</i>\nüí≤ –í–∞–ª—é—Ç–∞:<i>{n["currency"]}</i>\nüóû –°–æ–±—ã—Ç–∏–µ: <i>{n["title"]}</i></b>\n\n'
    
    await callback.message.answer(message_text)


@router.message(Command('news'))
async def promo(message: Message, trader_data_service: TraderDataService):
    trader_data = await trader_data_service.get_by_tg_id(message.from_user.id)
    if not trader_data:
        await message.answer('<b>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É ‚ùå </b>')
        return
    
    news = await get_current_news()

    message_text = ''
    for n in news:
        message_text += f'<b>‚è≥ –í—Ä–µ–º—è: <i>{n["time"]}</i>\nüí≤ –í–∞–ª—é—Ç–∞:<i>{n["currency"]}</i>\nüóû –°–æ–±—ã—Ç–∏–µ: <i>{n["title"]}</i></b>\n\n'
    
    await message.answer(message_text)


@router.callback_query(F.data == 'statistics')
async def statistics(callback: CallbackQuery, stat_service: StatService):
    await callback.answer()
    
    now = datetime.now(timezone(timedelta(hours=3)))
    yesterday = now - timedelta(days=1)
    yesterday_date = yesterday.strftime('%d.%m.%Y')
    
    
    yesterday_stat = await stat_service.get_last_day()
    
    if not yesterday_stat or yesterday_stat.date != yesterday_date:
        await stat_service.add(
            yesterday_date,
            randint(710, 1010),
            randint(110, 310),
            randint(5, 30)
        )
    
    last_week = await stat_service.get_last_week()
    
    message_text = '<b>–û—Ç–∫—Ä—ã—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n\n'
    for day in last_week:
        message_text += f'üïê –î–∞—Ç–∞: <i>{day.date}</i>\n‚úî –ü—Ä–æ—Ñ–∏—Ç—ã: <i>{day.profit}</i>\n‚ùå –ú–∏–Ω—É—Å—ã: <i>{day.loss}</i>\n‚ôªÔ∏è –í–æ–∑–≤—Ä–∞—Ç: <i>{day.break_even}</i>\n<blockquote>–í–∏–Ω—Ä–µ–π—Ç: {round(day.profit / (day.loss + day.profit) * 100)}%</blockquote>\n\n'
    
    await callback.message.answer(message_text)


@router.callback_query(F.data == 'change_otc')
async def change_otc(callback: CallbackQuery, user_service: UserService):
    await callback.answer()
    otc = await user_service.change_otc(callback.from_user.id)
    
    try:
        await callback.message.edit_reply_markup(
            inline_message_id=callback.inline_message_id,
            reply_markup=user_kbs.forecast_menu(otc)
        )
    except:
        pass

@router.callback_query(F.data == 'menu')
async def menu(callback: CallbackQuery):
    await callback.answer()
    image = FSInputFile('images/photo.jpg')
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer_photo(image, caption='<b>–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n<blockquote>/news ‚Äì üì∞ –ù–æ–≤–æ—Å—Ç–∏ \n/forecast ‚Äì üìä –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑</blockquote></b>',
                                        reply_markup=user_kbs.main_kb)


