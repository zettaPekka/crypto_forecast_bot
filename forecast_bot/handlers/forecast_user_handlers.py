from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from forecast_bot.middlewares.db_di import DatabaseDI
from database.services.user_service import UserService
from database.services.trader_data_service import TraderDataService
from forecast_bot.keyboards import user_kbs

from random import randint
from asyncio import sleep
from typing import Callable


router = Router()
router.message.middleware(DatabaseDI())
router.callback_query.middleware(DatabaseDI())


async def choose_active(callback: CallbackQuery, markup: Callable, otc: bool, page: int):
    try:
        await callback.message.edit_text('<b>–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–Ω—ã–π –∞–∫—Ç–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n<blockquote>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Pocket Option, –∞ –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ ‚úÖ</blockquote></b>',
                                        reply_markup=markup(otc, page))
    except:
            await callback.message.answer('<b>–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–Ω—ã–π –∞–∫—Ç–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n<blockquote>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Pocket Option, –∞ –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ ‚úÖ</blockquote></b>',
                                        reply_markup=markup(otc, page))
            return


@router.callback_query(F.data == 'forecast_menu')
async def forecast_menu(callback: CallbackQuery, user_service: UserService):
    await callback.answer()
    
    user = await user_service.get(callback.from_user.id)
    
    await callback.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É —Ä–∞–∑–¥–µ–ª—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.</b>',
                                    reply_markup=user_kbs.forecast_menu(user.otc))
    
    try:
        await callback.message.delete()
    except:
        pass


@router.message(Command('forecast'))
async def forecast_menu(message: Message, user_service: UserService, trader_data_service: TraderDataService):
    user = await user_service.get(message.from_user.id)
    trader_data = await trader_data_service.get_by_tg_id(user.tg_id)
    if trader_data:
        await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É —Ä–∞–∑–¥–µ–ª—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.</b>',
                                        reply_markup=user_kbs.forecast_menu(user.otc))
        return
    
    await message.answer('<b>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É ‚ùå </b>')


@router.callback_query(F.data.startswith('currency_pairs'))
async def currency_pairs(callback: CallbackQuery, user_service: UserService):
    await callback.answer()
    
    user = await user_service.get(callback.from_user.id)
    page = 1 if len(callback.data.split('_')) < 3 else int(callback.data.split('_')[-1]) 

    await choose_active(callback, user_kbs.currency_pairs_by_page, user.otc, page)
    return

@router.callback_query(F.data.startswith('crypto'))
async def crypto(callback: CallbackQuery, user_service: UserService):
    await callback.answer()
    
    user = await user_service.get(callback.from_user.id)
    page = 1 if len(callback.data.split('_')) < 2 else int(callback.data.split('_')[-1]) 
    
    await choose_active(callback, user_kbs.crypto_by_page, user.otc, page)
    return


@router.callback_query(F.data.startswith('indices'))
async def indeces(callback: CallbackQuery, user_service: UserService):
    await callback.answer()
    
    user = await user_service.get(callback.from_user.id)
    page = 1 if len(callback.data.split('_')) < 2 else int(callback.data.split('_')[-1]) 
    
    await choose_active(callback, user_kbs.indices_by_page, user.otc, page)
    return


@router.callback_query(F.data.startswith('commodities'))
async def commodities(callback: CallbackQuery, user_service: UserService):
    await callback.answer()
    
    user = await user_service.get(callback.from_user.id)
    page = 1 if len(callback.data.split('_')) < 2 else int(callback.data.split('_')[-1]) 
    
    await choose_active(callback, user_kbs.commodities_by_page, user.otc, page)
    return

@router.callback_query(F.data.startswith('stocks'))
async def stocks(callback: CallbackQuery, user_service: UserService):
    await callback.answer()
    
    user = await user_service.get(callback.from_user.id)
    page = 1 if len(callback.data.split('_')) < 2 else int(callback.data.split('_')[-1]) 
    
    await choose_active(callback, user_kbs.stocks_by_page, user.otc, page)
    return


@router.callback_query(F.data.startswith('get_forecast'))
async def get_forecast(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await state.set_data({'active': callback.data.split('_')[-1]})
    await callback.message.edit_text('<b>–ê–∫—Ç–∏–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ üïê</b>', 
                                        reply_markup=user_kbs.period)


@router.callback_query(F.data.startswith('period'))
async def period(callback: CallbackQuery, state: FSMContext, user_service: UserService):
    await callback.answer()
    
    user = await user_service.get(callback.from_user.id)
    
    active = await state.get_data()
    active = active['active'] if not user.otc else f'{active["active"]} OTC'
    
    await callback.message.edit_text(f'<b>‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ... —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è - <i>20 —Å–µ–∫—É–Ω–¥</i>\n\n–†–æ–±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∞–∫—Ç–∏–≤—É {active} —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é\n\n<blockquote>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —Å–∞–π—Ç–æ–≤ Pocket Option –∏ Trading View, –∞ —Ç–∞–∫ –∂–µ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞ (Investing). –†–æ–±–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ –∏ —Ç—Ä–µ–Ω–¥ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö</blockquote></b>')
    
    period = callback.data.split('_')[-1]
    time_dict = {
        '15s': 15,
        '30s': 30,
        '1m': 60,
        '2m': 120,
        '3m': 180,
        '5m': 300,
        '10m': 600,
        '15m': 900,
        '30m': 1800,
        '60m': 3600
    }
    
    forecast = '–ø–æ–≤—ã—à–µ–Ω–∏–µ üìà' if randint(0, 1) else '–ø–æ–Ω–∏–∂–µ–Ω–∏–µ üìâ'
    
    await sleep(randint(8, 14))
    
    image = FSInputFile('images/up.jpg') if forecast == '–ø–æ–≤—ã—à–µ–Ω–∏–µ' else FSInputFile('images/down.jpg')
    caption = "<b>üíº –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∞–∫—Ç–∏–≤—É:</b> <i><b>{active}</b></i>\n<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> <i><b>{forecast}</b></i>\n<b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> <i><b>{period}</b></i>\n\n<blockquote><b>–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ —Å–¥–µ–ª–∫—É –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ. –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ!</b></blockquote>"
    forecast_message = await callback.message.answer_photo(
        photo=image,
        caption=caption.format(active=active, forecast=forecast, period=period),
    )
    
    try:
        await callback.message.delete()
    except:
        pass
    
    await sleep(time_dict[period])
    
    image = FSInputFile('images/completed.jpg')
    await forecast_message.reply_photo(image, caption=f'<b>–°–¥–µ–ª–∫–∞ –ø–æ –∞–∫—Ç–∏–≤—É <i>{active}</i> –Ω–∞ {forecast} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑\n\n<blockquote>–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –Ω–µ—É–¥–∞—á–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —ç—Ç–æ–º—É –∂–µ –∞–∫—Ç–∏–≤—É, —á—Ç–æ –±—ã –±–æ—Ç –º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</blockquote></b>',
                                        reply_markup=user_kbs.forecast_menu(user.otc))